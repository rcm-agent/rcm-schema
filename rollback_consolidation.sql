-- =====================================================
-- Rollback Script for Workflow Table Consolidation
-- Run this if you need to revert to the old structure
-- psql -U postgres -d rcm_db -f rollback_consolidation.sql
-- =====================================================

BEGIN;

-- ============================================================
-- 1. Recreate old tables
-- ============================================================

-- Recreate workflow_trace table
CREATE TABLE IF NOT EXISTS workflow_trace (
    trace_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    batch_job_item_id UUID,
    org_id UUID NOT NULL REFERENCES organization(org_id),
    workflow_id UUID REFERENCES user_workflow(workflow_id),
    channel TEXT,
    external_id VARCHAR(255),
    status TEXT DEFAULT 'pending',
    action_type TEXT,
    action_detail JSONB,
    success BOOLEAN DEFAULT false,
    duration_ms INT,
    error_detail JSONB,
    error_message TEXT,
    llm_prompt TEXT,
    llm_response TEXT,
    llm_model VARCHAR(100),
    llm_tokens_used INT,
    tier SMALLINT,
    tier_reason TEXT,
    config_snapshot JSONB,
    start_time TIMESTAMPTZ,
    end_time TIMESTAMPTZ,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    user_id UUID REFERENCES app_user(user_id),
    created_by UUID REFERENCES app_user(user_id),
    session_id UUID
);

-- Recreate workflow_steps table
CREATE TABLE IF NOT EXISTS workflow_steps (
    step_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    trace_id BIGINT NOT NULL REFERENCES workflow_trace(trace_id) ON DELETE CASCADE,
    node_id BIGINT NOT NULL,
    step_number INTEGER NOT NULL,
    status TEXT DEFAULT 'pending',
    input_data JSONB,
    output_data JSONB,
    error_message TEXT,
    start_time TIMESTAMPTZ,
    end_time TIMESTAMPTZ,
    duration_ms INTEGER,
    retry_count INTEGER NOT NULL DEFAULT 0,
    metadata JSONB,
    UNIQUE (trace_id, step_number)
);

-- Recreate workflow_events table
CREATE TABLE IF NOT EXISTS workflow_events (
    event_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    trace_id BIGINT NOT NULL REFERENCES workflow_trace(trace_id) ON DELETE CASCADE,
    step_id BIGINT REFERENCES workflow_steps(step_id) ON DELETE CASCADE,
    event_type VARCHAR(100) NOT NULL,
    event_data JSONB NOT NULL,
    timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Recreate workflow_trace_screenshot table
CREATE TABLE IF NOT EXISTS workflow_trace_screenshot (
    screenshot_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    trace_id BIGINT NOT NULL REFERENCES workflow_trace(trace_id) ON DELETE CASCADE,
    org_id UUID NOT NULL,
    node_id INTEGER NOT NULL,
    node_name VARCHAR(255) NOT NULL,
    step_index INTEGER NOT NULL,
    screenshot_url TEXT NOT NULL,
    thumbnail_url TEXT,
    action_description TEXT NOT NULL,
    element_selector TEXT,
    element_found BOOLEAN DEFAULT false,
    confidence_score NUMERIC(3,2),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Recreate workflow_trace_context table
CREATE TABLE IF NOT EXISTS workflow_trace_context (
    context_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    trace_id BIGINT NOT NULL REFERENCES workflow_trace(trace_id) ON DELETE CASCADE,
    key VARCHAR(255) NOT NULL,
    value JSONB NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ,
    UNIQUE(trace_id, key)
);

-- Recreate workflow_trace_endpoint table
CREATE TABLE IF NOT EXISTS workflow_trace_endpoint (
    trace_id BIGINT NOT NULL REFERENCES workflow_trace(trace_id) ON DELETE CASCADE,
    endpoint_id BIGINT NOT NULL,
    PRIMARY KEY (trace_id, endpoint_id)
);

-- ============================================================
-- 2. Migrate data back from consolidated tables
-- ============================================================

-- Migrate from user_workflow_run back to workflow_trace
INSERT INTO workflow_trace (
    trace_id,
    org_id,
    workflow_id,
    channel,
    external_id,
    status,
    duration_ms,
    error_message,
    llm_prompt,
    llm_response,
    llm_model,
    llm_tokens_used,
    tier,
    tier_reason,
    config_snapshot,
    start_time,
    end_time,
    created_at,
    created_by
)
SELECT 
    COALESCE(legacy_trace_id, nextval('workflow_trace_trace_id_seq')),
    org_id,
    workflow_id,
    channel,
    external_id,
    status,
    duration_ms,
    error_message,
    llm_prompt,
    llm_response,
    llm_model,
    llm_tokens_used,
    tier,
    tier_reason,
    config_snapshot,
    started_at,
    ended_at,
    created_at,
    created_by
FROM user_workflow_run
ON CONFLICT (trace_id) DO NOTHING;

-- Migrate from user_workflow_run_step back to workflow_steps
INSERT INTO workflow_steps (
    step_id,
    trace_id,
    node_id,
    step_number,
    status,
    input_data,
    output_data,
    error_message,
    start_time,
    end_time,
    duration_ms,
    retry_count,
    metadata
)
SELECT 
    COALESCE(s.legacy_step_id, nextval('workflow_steps_step_id_seq')),
    wt.trace_id,
    s.node_id::bigint,  -- Convert UUID back to BIGINT if needed
    s.step_number,
    s.status,
    s.input_data,
    s.output_data,
    s.error_message,
    s.started_at,
    s.ended_at,
    s.duration_ms,
    s.retry_count,
    s.metadata
FROM user_workflow_run_step s
JOIN user_workflow_run r ON r.run_id = s.run_id
JOIN workflow_trace wt ON wt.org_id = r.org_id 
    AND wt.workflow_id = r.workflow_id 
    AND COALESCE(wt.created_at, NOW()) = COALESCE(r.created_at, NOW())
ON CONFLICT (step_id) DO NOTHING;

-- Extract events from user_workflow_run_step.events back to workflow_events
INSERT INTO workflow_events (
    trace_id,
    step_id,
    event_type,
    event_data,
    timestamp
)
SELECT 
    wt.trace_id,
    ws.step_id,
    (event->>'type')::varchar(100),
    event->'data',
    (event->>'timestamp')::timestamptz
FROM user_workflow_run_step s
JOIN user_workflow_run r ON r.run_id = s.run_id
JOIN workflow_trace wt ON wt.org_id = r.org_id 
    AND wt.workflow_id = r.workflow_id
JOIN workflow_steps ws ON ws.trace_id = wt.trace_id 
    AND ws.step_number = s.step_number,
LATERAL jsonb_array_elements(s.events) AS event
WHERE s.events IS NOT NULL AND s.events != '[]'::jsonb;

-- Extract screenshots from user_workflow_run_step.screenshots back to workflow_trace_screenshot
INSERT INTO workflow_trace_screenshot (
    trace_id,
    org_id,
    node_id,
    node_name,
    step_index,
    screenshot_url,
    thumbnail_url,
    action_description,
    element_selector,
    element_found,
    confidence_score,
    created_at
)
SELECT 
    wt.trace_id,
    r.org_id,
    s.node_id::integer,
    'Node ' || s.step_number,
    s.step_number,
    screenshot->>'url',
    screenshot->>'thumbnail_url',
    COALESCE(screenshot->>'action', 'Step ' || s.step_number),
    screenshot->>'selector',
    (screenshot->>'element_found')::boolean,
    (screenshot->>'confidence')::numeric(3,2),
    (screenshot->>'timestamp')::timestamptz
FROM user_workflow_run_step s
JOIN user_workflow_run r ON r.run_id = s.run_id
JOIN workflow_trace wt ON wt.org_id = r.org_id 
    AND wt.workflow_id = r.workflow_id,
LATERAL jsonb_array_elements(s.screenshots) AS screenshot
WHERE s.screenshots IS NOT NULL AND s.screenshots != '[]'::jsonb;

-- Extract context from user_workflow_run.context back to workflow_trace_context
INSERT INTO workflow_trace_context (
    trace_id,
    key,
    value,
    created_at
)
SELECT 
    wt.trace_id,
    key,
    value,
    r.created_at
FROM user_workflow_run r
JOIN workflow_trace wt ON wt.org_id = r.org_id 
    AND wt.workflow_id = r.workflow_id,
LATERAL jsonb_each(r.context) AS ctx(key, value)
WHERE r.context IS NOT NULL AND r.context != '{}'::jsonb;

-- Extract endpoints from user_workflow_run.endpoints_used back to workflow_trace_endpoint
INSERT INTO workflow_trace_endpoint (
    trace_id,
    endpoint_id
)
SELECT 
    wt.trace_id,
    (endpoint_id::text)::bigint
FROM user_workflow_run r
JOIN workflow_trace wt ON wt.org_id = r.org_id 
    AND wt.workflow_id = r.workflow_id,
LATERAL jsonb_array_elements(r.endpoints_used) AS endpoint_id
WHERE r.endpoints_used IS NOT NULL AND r.endpoints_used != '[]'::jsonb;

-- ============================================================
-- 3. Rename tables back to original names
-- ============================================================

-- Rename user_workflow_config back to workflow_configs
ALTER TABLE IF EXISTS user_workflow_config RENAME TO workflow_configs;

-- Rename user_workflow_cache_state back to micro_state
ALTER TABLE IF EXISTS user_workflow_cache_state RENAME TO micro_state;
ALTER TABLE IF EXISTS micro_state 
    RENAME COLUMN cache_state_id TO micro_state_id;

-- ============================================================
-- 4. Drop consolidated tables and views
-- ============================================================

-- Drop compatibility views
DROP VIEW IF EXISTS workflow_trace CASCADE;
DROP VIEW IF EXISTS workflow_steps CASCADE;

-- Drop RLS policies
DROP POLICY IF EXISTS user_workflow_run_org_isolation ON user_workflow_run;
DROP POLICY IF EXISTS user_workflow_run_step_org_isolation ON user_workflow_run_step;

-- Drop triggers
DROP TRIGGER IF EXISTS update_user_workflow_run_updated_at ON user_workflow_run;
DROP TRIGGER IF EXISTS update_user_workflow_run_step_updated_at ON user_workflow_run_step;

-- Drop new tables
DROP TABLE IF EXISTS user_workflow_run_step CASCADE;
DROP TABLE IF EXISTS user_workflow_run CASCADE;

-- ============================================================
-- 5. Recreate indexes on old tables
-- ============================================================

CREATE INDEX IF NOT EXISTS idx_workflow_trace_workflow ON workflow_trace(workflow_id);
CREATE INDEX IF NOT EXISTS idx_workflow_trace_org ON workflow_trace(org_id);
CREATE INDEX IF NOT EXISTS idx_workflow_trace_created ON workflow_trace(created_at);

CREATE INDEX IF NOT EXISTS idx_workflow_steps_trace ON workflow_steps(trace_id);
CREATE INDEX IF NOT EXISTS idx_workflow_steps_status ON workflow_steps(status);

CREATE INDEX IF NOT EXISTS idx_workflow_events_trace ON workflow_events(trace_id);
CREATE INDEX IF NOT EXISTS idx_workflow_events_step ON workflow_events(step_id);
CREATE INDEX IF NOT EXISTS idx_workflow_events_type ON workflow_events(event_type);
CREATE INDEX IF NOT EXISTS idx_workflow_events_timestamp ON workflow_events(timestamp);

CREATE INDEX IF NOT EXISTS idx_workflow_trace_context_trace ON workflow_trace_context(trace_id);
CREATE INDEX IF NOT EXISTS idx_workflow_trace_context_key ON workflow_trace_context(key);

-- ============================================================
-- 6. Revert alembic version
-- ============================================================

DELETE FROM alembic_version WHERE version_num = '018_consolidate_workflow_tables';

-- ============================================================
-- 7. Summary
-- ============================================================

DO $$
DECLARE
    v_trace_count INTEGER;
    v_step_count INTEGER;
    v_event_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO v_trace_count FROM workflow_trace;
    SELECT COUNT(*) INTO v_step_count FROM workflow_steps;
    SELECT COUNT(*) INTO v_event_count FROM workflow_events;
    
    RAISE NOTICE '===================================================';
    RAISE NOTICE 'Rollback Complete!';
    RAISE NOTICE '===================================================';
    RAISE NOTICE 'Restored % workflow traces', v_trace_count;
    RAISE NOTICE 'Restored % workflow steps', v_step_count;
    RAISE NOTICE 'Restored % workflow events', v_event_count;
    RAISE NOTICE '';
    RAISE NOTICE 'Old table structure has been restored.';
    RAISE NOTICE 'Tables renamed back:';
    RAISE NOTICE '  - user_workflow_config → workflow_configs';
    RAISE NOTICE '  - user_workflow_cache_state → micro_state';
    RAISE NOTICE '===================================================';
END $$;

COMMIT;