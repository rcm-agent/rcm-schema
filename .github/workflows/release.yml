name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
      
      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-beta1"
            exit 1
          fi
      
      - name: Extract changelog
        id: changelog
        run: |
          # Extract changelog for this version
          VERSION="${{ steps.version.outputs.version }}"
          CHANGELOG=""
          
          if [[ -f "CHANGELOG.md" ]]; then
            # Extract section for this version
            CHANGELOG=$(awk "/^## \[?${VERSION}\]?/{flag=1; next} /^## \[?v[0-9]+\.[0-9]+\.[0-9]+/{flag=0} flag" CHANGELOG.md)
          fi
          
          if [[ -z "$CHANGELOG" ]]; then
            CHANGELOG="No changelog available for this version."
          fi
          
          # Save to file for multi-line output
          echo "$CHANGELOG" > changelog.txt
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  run-tests:
    name: Run Tests
    uses: ./.github/workflows/ci.yml

  build-and-publish:
    name: Build and Publish
    needs: [validate-release, run-tests]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Update version in __init__.py
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NUM="${VERSION#v}"  # Remove 'v' prefix
          sed -i "s/__version__ = .*/__version__ = \"${VERSION_NUM}\"/" __init__.py
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: |
          twine check dist/*
          ls -la dist/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages
          path: dist/
      
      # Uncomment to publish to PyPI
      # - name: Publish to PyPI
      #   env:
      #     TWINE_USERNAME: __token__
      #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      #   run: twine upload dist/*

  build-docker:
    name: Build Docker Image
    needs: [validate-release, run-tests]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: [validate-release, build-and-publish, build-docker]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-packages
          path: dist/
      
      - name: Generate release notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          cat > release-notes.md << EOF
          ## What's Changed
          
          ${{ needs.validate-release.outputs.changelog }}
          
          ## Installation
          
          ### Using pip
          \`\`\`bash
          pip install rcm-schema==${VERSION#v}
          \`\`\`
          
          ### Using Docker
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:${VERSION}
          \`\`\`
          
          ## Database Migrations
          
          After updating, run database migrations:
          \`\`\`bash
          python run_migrations.py
          \`\`\`
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.0...${VERSION}
          EOF
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
          files: |
            dist/*

  update-docs:
    name: Update Documentation
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: ${{ !contains(needs.validate-release.outputs.version, '-') }}  # Only for stable releases
    
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update README version badges
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NUM="${VERSION#v}"
          
          # Update version badge in README
          sed -i "s/version-[0-9.]*-/version-${VERSION_NUM}-/" README.md || true
          
          # Update installation instructions
          sed -i "s/rcm-schema==[0-9.]*/rcm-schema==${VERSION_NUM}/" README.md || true
          sed -i "s/rcm-schema:v[0-9.]*/rcm-schema:${VERSION}/" README.md || true
      
      - name: Create pull request for docs update
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: update version to ${{ needs.validate-release.outputs.version }}"
          title: "docs: update documentation for ${{ needs.validate-release.outputs.version }}"
          body: |
            This PR updates the documentation for the ${{ needs.validate-release.outputs.version }} release.
            
            Changes:
            - Updated version badges
            - Updated installation instructions
            
            Auto-generated by release workflow.
          branch: update-docs-${{ needs.validate-release.outputs.version }}
          delete-branch: true